FORMAT: 1A
HOST: http://127.0.0.1:5000

# Bite API

Bite API permite a los usuarios la compra y venta de productos agregados por ellos mismos.

# Group Autenticación
::: note
Todas las rutas, excepto por `/register` y `/login`, requieren que se incluya una JWT por lo que es necesario crear un usuario y autenticarse para poder utilizar la API.
:::

## Registro de usuarios [/register]

### Registrar usuario [POST]
Crear un nuevo usuario para interactuar con la API.

+ Request (application/json)
	+ Body
		```
		{
			"first_name": "Test",
			"last_name": "Account",
			"email": "testaccount@hotmail.com",
			"password": "1234"
		}
		```

+ Response 201 (application/json)
Devuelve al mismo usuario para verificar que se guardó correctamente.
	+ Body
		```
		{
			"id": 1,
			"first_name": "Test",
			"last_name": "Account",
			"email": "testaccount@hotmail.com",
			"type": "normal",
			"picture": null,
			"is_active": true
		}
		```

+ Response 400 (application/json)
En caso de que el correo ya esté registrado o alguno de los datos no sea válido, se devolverá el mensaje correspondiente.
	+ Body
		```
		{"message": ...}
		```

## Inicio de sesión [/login]

### Autenticar usuario [POST]
Obtener una JWT para poder utilizar las demás rutas.

+ Request (application/json)
	+ Body
		```
		{
			"email": "testaccount@hotmail.com",
			"password": "1234"
		}
		```

+ Response 200 (application/json)
El correo y la contraseña son los correctos.
	+ Body
		```
		{
			"access_token": ...
		}
		```

+ Response 401 (application/json)
El correo electrónico o la contraseña son incorrectos.
	+ Body
		```
		{
			"description": "Invalid credentials",
			"error": "Bad Request",
			"status_code": 401
		}
		```

# Group Categorías

## Colección de categorías [/categories]

### Obtener categorías [GET]
Devuelve una lista de las categorías existentes.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
	+ Body
		```
		[
			{
				"id": 1,
				"name": "Categoría 1"
			},
			...
		]
		```

### Crear categoría [POST]
Ingresa una nueva categoría a la base de datos.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```
	+ Body
		```
		{
			"name": "Categoría 1"
		}
		```

+ Response 201 (application/json)
La categoría ha sido creada. Devuelve los datos de la categoría.
	+ Body
		```
		{
			"id": 1,
			"name": "Categoría 1"
		}
		```

+ Response 400 (application/json)
La categoría que se quiere crear ya existe en el sistema.
	+ Body
		```
		{"message": "La categoría 'Categoría 1' ya existe."}
		```

+ Response 401 (application/json)
El usuario no tiene permitido crear categorías (Solo pueden ser creadas por usuarios administradores).
	+ Body
		```
		{"message": "No tiene permitido crear nuevas categorías."}
		```

## Categoría [/categories/:category_id]

### Obtener categoría [GET]
Devuelve una única categoría.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
La categoría tiene un ID válido y está registrado en el sistema.
	+ Body
		```
		{
			"id": 1,
			"name": "Categoría 1"
		}
		```

+ Response 404 (application/json)
La categoría que el usuario busca no se pudo encontrar.
	+ Body
		```
		{"message": "La categoría con ID 1 no ha sido encontrada."}
		```

### Borrar categoría [DELETE]
Elimina una categoría.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
La categoría se elimina del sistema correctamente.
	+ Body
		```
		{"message": "Categoría con ID 1 eliminada correctamente."}
		```

+ Response 401 (application/json)
El usuario no cuenta con los permisos para eliminar una categoría (solo los administradores pueden hacerlo).
	+ Body
		```
		{"message": "No tiene permitido eliminar una categoría."}
		```

+ Response 404 (application/json)
La categoría ingresada según su ID no existe en el sistema.
	+ Body
		```
		{"message": "La categoría no ha sido encontrada."}
		```

# Group Favoritos

## Colección de Favoritos [/favourites]

### Obtener favoritos [GET]
Devuelve la lista de los productos favoritos del usuario.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
	+ Body
		```
		[
			{
				"id": 1,
				"product": {
					"id": 1,
					"vendor": {...},
					"category": {...},
					"name": "Producto 1",
					"description": "Descripción del producto 1",
					"price": 50.0,
					"image": "data:image/png;base64...",
					"visible": true
				}
			},
			...
		]
		```

### Agregar favorito [POST]
Agrega a la lista de favoritos del usuario un producto si no ha sido agregado aún.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```
	+ Body
		```
		{
			"product_id": 1
		}
		```

+ Response 200 (application/json)
El producto ha sido marcado como favorito para el usuario.
	+ Body
		```
		{
			"id": 1,
			"product": {
				"id": 1,
				"vendor": {...},
				"category": {...},
				"name": "Producto 1",
				"description": "Descripción del producto 1",
				"price": 50.0,
				"image": "data:image/png;base64...",
				"visible": true
			}
		}
		```

+ Response 400 (application/json)
El producto ya estaba marcado como favorito, no puede ser marcado de nuevo.
	+ Body
		```
		{"message": "El producto con ID 1 ya está marcado como favorito."}
		```

+ Response 401 (application/json)
El usuario no tiene permiso para agregar favoritos (los vendedores no pueden realizarlo).
	+ Body
		```
		{"message": "No puede marcar un producto como favorito."}
		```

+ Response 404 (application/json)
El producto no pudo ser encontrado con el ID que se proporcionó en la petición.
	+ Body
		```
		{"message": "El producto con ID 1 no ha sido encontrado."}
		```

## Favorito [/favourites/:favourite_id]

### Eliminar favorito [DELETE]
Permite quitar un producto de los favoritos del usuario. No elimina el producto del vendedor.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
El producto se elimina correctamente de la lista de favoritos.
	+ Body
		```
		{"message": "Favorito con ID 1 eliminado correctamente."}
		```

+ Response 401 (application/json)
El usuario no puede eliminar el favorito porque le pertenece a otro usuario.
	+ Body
		```
		{"message": "No tiene permitido eliminar este favorito."}
		```

+ Response 404 (application/json)
El registro del favorito no pudo ser encontrado con el ID indicado en la petición.
	+ Body
		```
		{"message": "El favorito con ID 1 no ha sido encontrado."}
		```

# Group Opiniones

## Colección de Opiniones [/products/:product_id/opinions]

### Obtener opiniones [GET]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 404 (application/json)

### Crear opinión [POST]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 201 (application/json)

+ Response 401 (application/json)

+ Response 404 (application/json)

## Opinión [/products/:product_id/opinions/:opinion_id]

### Obtener opinión [GET]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 404 (application/json)

### Borrar opinión [DELETE]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 401 (application/json)

+ Response 404 (application/json)

# Group Pedidos

## Colección de Pedidos [/orders]

### Obtener pedidos [GET]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

### Crear pedido [POST]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 201 (application/json)

+ Response 400 (application/json)

+ Response 401 (application/json)

+ Response 404 (application/json)

## Pedido [/orders/:order_id]

### Obtener pedido [GET]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 401 (application/json)

+ Response 404 (application/json)

### Completar pedido [PUT]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 401 (application/json)

+ Response 404 (application/json)

### Cancelar pedido [DELETE]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 401 (application/json)

+ Response 404 (application/json)

# Group Productos

## Colección de productos [/products]

### Buscar productos [GET]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

### Crear producto [POST]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 201 (application/json)

+ Response 400 (application/json)

+ Response 401 (application/json)

## Producto [/products/:product_id]

### Obtener producto [GET]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 401 (application/json)

+ Response 404 (application/json)

### Modificar producto [PUT]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 400 (application/json)

+ Response 401 (application/json)

+ Response 404 (application/json)

### Eliminar producto [DELETE]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 401 (application/json)

+ Response 404 (application/json)

## Inventario [/users/:user_id/products]

### Obtener inventario [GET]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 401 (application/json)

# Group Reportes

## Colección de Reportes [/reports]

### Obtener reportes [GET]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 401 (application/json)

### Generar reporte [POST]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 201 (application/json)

+ Response 404 (application/json)

## Reporte [/reports/:report_id]

### Obtener reporte [GET]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 401 (application/json)

+ Response 404 (application/json)

### Eliminar reporte [DELETE]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 401 (application/json)

+ Response 404 (application/json)

# Group Usuarios

## Datos del usuario [/users/:user_id]

### Obtener usuario [GET]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 404 (application/json)

### Modificar datos [PUT]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 400 (application/json)

+ Response 401 (application/json)

### Eliminar usuario [DELETE]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 401 (application/json)

+ Response 404 (application/json)

## Imagen del usuario [/users/:user_id/picture]

### Actualizar imagen [PUT]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 400 (application/json)

+ Response 401 (application/json)
