FORMAT: 1A
HOST: https://biteappjrz.herokuapp.com

# Bite API

Bite API permite a los usuarios la compra y venta de productos agregados por ellos mismos.

# Group Autenticación
::: note
Todas las rutas, excepto por `/register` y `/login`, requieren que se incluya una JWT por lo que es necesario crear un usuario y autenticarse para poder utilizar la API.
:::

## Registro de usuarios [/register]

### Registrar usuario [POST]
Crear un nuevo usuario para interactuar con la API.

+ Request (application/json)
	+ Body
		```
		{
			"first_name": "Test",
			"last_name": "Account",
			"email": "testaccount@hotmail.com",
			"password": "1234"
		}
		```

+ Response 201 (application/json)
Devuelve al mismo usuario para verificar que se guardó correctamente.
	+ Body
		```
		{
			"id": 1,
			"first_name": "Test",
			"last_name": "Account",
			"email": "testaccount@hotmail.com",
			"type": "normal",
			"picture": null,
			"is_active": true
		}
		```

+ Response 400 (application/json)
En caso de que el correo ya esté registrado o alguno de los datos no sea válido, se devolverá el mensaje correspondiente.
	+ Body
		```
		{"message": ...}
		```

## Inicio de sesión [/login]

### Autenticar usuario [POST]
Obtener una JWT para poder utilizar las demás rutas.

+ Request (application/json)
	+ Body
		```
		{
			"email": "testaccount@hotmail.com",
			"password": "1234"
		}
		```

+ Response 200 (application/json)
El correo y la contraseña son los correctos.
	+ Body
		```
		{
			"access_token": ...
		}
		```

+ Response 401 (application/json)
El correo electrónico o la contraseña son incorrectos.
	+ Body
		```
		{
			"description": "Invalid credentials",
			"error": "Bad Request",
			"status_code": 401
		}
		```

## Usuario actual [/me]

### Obtener usuario actual [GET]
Devuelve los datos del usuario al que representa la JWT.

::: warning
En caso de que no se proporcione una JWT o que esta haya expirado, se devolverá un error de autenticación.
:::

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
	+ Body
		```
		{
			"id": 1,
			"first_name": "Test",
			"last_name": "Account",
			"email": "testaccount@hotmail.com",
			"type": "normal",
			"picture": null,
			"is_active": true
		}
		```

# Group Categorías

## Colección de categorías [/categories]

### Obtener categorías [GET]
Devuelve una lista de las categorías existentes.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
	+ Body
		```
		[
			{
				"id": 1,
				"name": "Categoría 1"
			},
			...
		]
		```

### Crear categoría [POST]
Ingresa una nueva categoría a la base de datos.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```
	+ Body
		```
		{
			"name": "Categoría 1"
		}
		```

+ Response 201 (application/json)
La categoría ha sido creada. Devuelve los datos de la categoría.
	+ Body
		```
		{
			"id": 1,
			"name": "Categoría 1"
		}
		```

+ Response 400 (application/json)
La categoría que se quiere crear ya existe en el sistema.
	+ Body
		```
		{"message": "La categoría 'Categoría 1' ya existe."}
		```

+ Response 401 (application/json)
El usuario no tiene permitido crear categorías (Solo pueden ser creadas por usuarios administradores).
	+ Body
		```
		{"message": "No tiene permitido crear nuevas categorías."}
		```

## Categoría [/categories/{category_id}]

### Obtener categoría [GET]
Devuelve una única categoría.

+ Parameters
	+ category_id: `1` (int) - Identificador de la categoría que se quiere obtener.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
La categoría tiene un ID válido y está registrado en el sistema.
	+ Body
		```
		{
			"id": 1,
			"name": "Categoría 1"
		}
		```

+ Response 404 (application/json)
La categoría que el usuario busca no se pudo encontrar.
	+ Body
		```
		{"message": "La categoría con ID 1 no ha sido encontrada."}
		```

### Borrar categoría [DELETE]
Elimina una categoría.

::: warning
Al eliminar una categoría se eliminarán todos los productos ligados a ella.
:::

+ Parameters
	+ category_id: `1` (int) - Identificador de la categoría que se quiere eliminar.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
La categoría se elimina del sistema correctamente.
	+ Body
		```
		{"message": "Categoría con ID 1 eliminada correctamente."}
		```

+ Response 401 (application/json)
El usuario no cuenta con los permisos para eliminar una categoría (solo los administradores pueden hacerlo).
	+ Body
		```
		{"message": "No tiene permitido eliminar una categoría."}
		```

+ Response 404 (application/json)
La categoría ingresada según su ID no existe en el sistema.
	+ Body
		```
		{"message": "La categoría no ha sido encontrada."}
		```

# Group Favoritos

## Colección de Favoritos [/favourites]

### Obtener favoritos [GET]
Devuelve la lista de los productos favoritos del usuario.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
	+ Body
		```
		[
			{
				"id": 1,
				"product": {
					"id": 1,
					"vendor": {...},
					"category": {...},
					"name": "Producto 1",
					"description": "Descripción del producto 1",
					"price": 50.0,
					"image": "https://...",
					"visible": true
				}
			},
			...
		]
		```

### Agregar favorito [POST]
Agrega a la lista de favoritos del usuario un producto si no ha sido agregado aún.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```
	+ Body
		```
		{
			"product_id": 1
		}
		```

+ Response 200 (application/json)
El producto ha sido marcado como favorito para el usuario.
	+ Body
		```
		{
			"id": 1,
			"product": {
				"id": 1,
				"vendor": {...},
				"category": {...},
				"name": "Producto 1",
				"description": "Descripción del producto 1",
				"price": 50.0,
				"image": "https://...",
				"visible": true
			}
		}
		```

+ Response 400 (application/json)
El producto ya estaba marcado como favorito, no puede ser marcado de nuevo.
	+ Body
		```
		{"message": "El producto con ID 1 ya está marcado como favorito."}
		```

+ Response 401 (application/json)
El usuario no tiene permiso para agregar favoritos (los vendedores no pueden realizarlo).
	+ Body
		```
		{"message": "No puede marcar un producto como favorito."}
		```

+ Response 404 (application/json)
El producto no pudo ser encontrado con el ID que se proporcionó en la petición.
	+ Body
		```
		{"message": "El producto con ID 1 no ha sido encontrado."}
		```

## Favorito [/favourites/{favourite_id}]

### Eliminar favorito [DELETE]
Permite quitar un producto de los favoritos del usuario. No elimina el producto del vendedor.

+ Parameters
	+ favourite_id: `1` (int) - Identificador del favorito a eliminar.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
El producto se elimina correctamente de la lista de favoritos.
	+ Body
		```
		{"message": "Favorito con ID 1 eliminado correctamente."}
		```

+ Response 401 (application/json)
El usuario no puede eliminar el favorito porque le pertenece a otro usuario.
	+ Body
		```
		{"message": "No tiene permitido eliminar este favorito."}
		```

+ Response 404 (application/json)
El registro del favorito no pudo ser encontrado con el ID indicado en la petición.
	+ Body
		```
		{"message": "El favorito con ID 1 no ha sido encontrado."}
		```

# Group Opiniones

## Colección de Opiniones [/products/{product_id}/opinions]

### Obtener opiniones [GET]
Devuelve la lista de opiniones realizadas sobre un producto en particular.

+ Parameters
	+ product_id: `1` (int) - Identificador del producto al que pertenecen las opiniones.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
El producto existe, por lo que se devuelve una lista con las opiniones.
	+ Body
		```
		[
			{
				"id": 1,
				"product_id": 1,
				"rating": 4,
				"comment": "Comentarios sobre el producto."
			},
			...
		]
		```

+ Response 404 (application/json)
El producto no se pudo encontrar con el ID proporcionado, por lo que devuelve un mensaje de error.
	+ Body
		```
		{"message": "El producto con ID 1 no ha sido encontrado."}
		```

### Crear opinión [POST]
Crea una opinión sobre un producto existente.

+ Parameters
	+ product_id: `1` (int) - Identificador del producto sobre el que se va a opinar.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```
	+ Body
		```
		{
			"id": 1,
			"product_id": 1,
			"rating": 4,
			"comment": "Comentarios sobre el producto."
		}
		```

+ Response 201 (application/json)
La opinión sobre el producto ha sido publicada.
	+ Body
		```
		{
			"id": 1,
			"product_id": 1,
			"rating": 4,
			"comment": "Comentarios sobre el producto."
		}
		```

+ Response 401 (application/json)
El usuario no tiene permiso para realizar opiniones. Los vendedores no pueden opinar sobre los productos.
	+ Body
		```
		{"message": "Un vendedor no puede realizar opiniones sobre los productos."}
		```

+ Response 404 (application/json)
El producto sobre el que se quiere opinar no se ha podido encontrar según el ID indicado.
	+ Body
		```
		{"message": "El producto con ID 1 no ha sido encontrado."}
		```

## Opinión [/products/{product_id}/opinions/{opinion_id}]

### Obtener opinión [GET]
Devuelve los datos de una opinión en concreto.

+ Parameters
	+ product_id: `1` (int) - Identificador del producto al que pertenece la opinión.
	+ opinion_id: `1` (int) - Identificador de la opinión a obtener.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
La opinión existe, así que se devuelven sus datos.
	+ Body
		```
		{
			"id": 1,
			"product_id": 1,
			"rating": 4,
			"comment": "Comentarios sobre el producto."
		}
		```

+ Response 404 (application/json)
La opinión no ha sido encontrada, por lo que se devuelve un mensaje de error.
	+ Body
		```
		{"message": "La opinión con ID 1 no ha sido encontrada."}
		```

### Borrar opinión [DELETE]
Elimina una opinión si resulta ofensiva o no es adecuada. Solo los administradores pueden realizarlo.

+ Parameters
	+ product_id: `1` (int) - Identificador del producto al que pertenece la opinión.
	+ opinion_id: `1` (int) - Identificador de la opinión a eliminar.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
La opinión fue removida con éxito del sistema. Notifica lo sucedido.
	+ Body
		```
		{"message": "Opinión con ID 1 eliminada correctamente."}
		```

+ Response 401 (application/json)
El usuario no cumple con el permiso para eliminar opiniones. Solo los administradores tienen permitido hacerlo.
	+ Body
		```
		{"message": "No tiene permitido eliminar esta opinión."}
		```

+ Response 404 (application/json)
La opinión no pudo encontrarse utilizando el ID de la URI.
	+ Body
		```
		{"message": "La opinión con ID 1 no ha sido encontrada."}
		```

# Group Pedidos

## Colección de Pedidos [/orders]

### Obtener pedidos [GET]
Muestra una lista de los pedidos. Si el usuario es vendedor, se le muestran los pedidos que tiene pendientes, de lo contrario, se devuelven los pedidos realizados.

::: note
El formato del tiempo del pedido es UTC.
:::

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
	+ Body
		```
		[
			{
				"id": 1,
				"customer": {...},
				"product": {...},
				"location": "Destino de entrega",
				"amount": 1,
				"comment": "Comentarios a realizar (pueden ser indicaciones)",
				"status": "pending",
				"order_time": "2020-10-25 00:43:34.991331"
			},
			...
		]
		```

### Crear pedido [POST]
Se realiza un nuevo pedido sobre un producto. Envía un mensaje de error si el usuario que lo realiza es vendedor.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```
	+ Body
		```
		{
			"product_id": 1,
			"location": "Destino de entrega",
			"amount": 1
		}
		```

+ Response 201 (application/json)
El pedido ha sido creado, se devuelven los detalles del producto, incluyendo la fecha en que se realizó.
	+ Body
		```
		{
			"id": 1,
			"customer": {...},
			"product": {...},
			"location": "Destino de entrega",
			"amount": 1,
			"comment": "Comentarios a realizar (pueden ser indicaciones)",
			"status": "pending",
			"order_time": "2020-10-25 00:43:34.991331"
		}
		```

+ Response 400 (application/json)
La cantidad que se indicó en la petición no es aceptada porque debe ser un número positivo.
	+ Body
		```
		{"message": "La cantidad (-1) no es válida."}
		```

+ Response 401 (application/json)
El usuario no tiene permitido realizar pedidos por ser vendedor.
	+ Body
		```
		{"message": "No tiene permitido realizar pedidos."}
		```

+ Response 404 (application/json)
El producto no pudo ser encontrado con el ID que se proporcionó en la petición.
	+ Body
		```
		{"message": "El producto con ID 1 no ha sido encontrado."}
		```

## Pedido [/orders/{order_id}]

### Obtener pedido [GET]
Se devuelven los detalles de un pedido en particular, solo en caso de que el usuario esté involucrado en él, ya sea como vendedor o como cliente.

+ Parameters
	+ order_id: `1` (int) - Identificador del pedido a obtener.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
El usuario está involucrado en el pedido, por lo que puede acceder a los detalles.
	+ Body
		```
		{
			"id": 1,
			"customer": {...},
			"product": {...},
			"location": "Destino de entrega",
			"amount": 1,
			"comment": "Comentarios a realizar (pueden ser indicaciones)",
			"status": "pending",
			"order_time": "2020-10-25 00:43:34.991331"
		}
		```

+ Response 401 (application/json)
El usuario no está involucrado de ninguna manera con el pedido, por lo que no puede ver los detalles.
	+ Body
		```
		{"message": "No tiene permitido consultar el pedido."}
		```

+ Response 404 (application/json)
El pedido no pudo ser encontrado con el ID que se proporcionó en la petición.
	+ Body
		```
		{"message": "El pedido con ID 1 no ha sido encontrado."}
		```

### Completar pedido [PUT]
Marca el pedido como finalizado, solo lo puede realizar el vendedor involucrado en el pedido.

+ Parameters
	+ order_id: `1` (int) - Identificador del pedido a modificar.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```
	+ Body
		```
		{
			"status": "done"
		}
		```

+ Response 200 (application/json)
Se devuelven los detalles del pedido, con el campo de estado como finalizado.
	+ Body
		```
		{
			"id": 1,
			"customer": {...},
			"product": {...},
			"location": "Destino de entrega",
			"amount": 1,
			"comment": "Comentarios a realizar (pueden ser indicaciones)",
			"status": "done",
			"order_time": "2020-10-25 00:43:34.991331"
		}
		```

+ Response 401 (application/json)
El usuario que realizó la petición no es el vendedor del producto, por lo que no puede realizar el cambio.
	+ Body
		```
		{"message": "No tiene permitido finalizar este pedido."}
		```

+ Response 404 (application/json)
El pedido no pudo ser encontrado con el ID que se indicó.
	+ Body
		```
		{"message": "El pedido con ID 1 no ha sido encontrado."}
		```

### Cancelar pedido [DELETE]
El cliente puede cancelar el pedido si hay un error en este. Se elimina el pedido del sistema para no dejar rastro de él.

+ Parameters
	+ order_id: `1` (int) - Identificador del pedido a eliminar.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
El usuario es el cliente del pedido, por lo que se borra correctamente.
	+ Body
		```
		{"message": "Pedido con ID 1 eliminado correctamente."}
		```

+ Response 401 (application/json)
El usuario no es el cliente del pedido, por lo que se le niega el permiso para cancelar el pedido.
	+ Body
		```
		{"message": "No tiene permitido cancelar este pedido."}
		```

+ Response 404 (application/json)
El pedido no se pudo encontrar con el ID que se proporcionó.
	+ Body
		```
		{"message": "El pedido con ID 1 no ha sido encontrado."}
		```

# Group Productos

## Colección de productos [/products{?page,vendor_id,category_id,search}]

### Buscar productos [GET]
Devuelve una lista de 10 productos, para conseguir los siguientes 10 se debe modificar el argumento `page`.

+ Parameters
	+ page: `1` (optional, int) - Página de productos: 1 devolverá los últimos 10 productos, 2 devolverá los 10 anteriores y así sucesivamente.
	+ vendor_id: `1` (optional, int) - Filtrar los productos por un único vendedor.
	+ category_id: `1` (optional, int) - Filtrar los productos por una categoría en específico.
	+ search: `"Producto"` (optional, string) - Agregar un término de búsqueda para filtrar los resultados por lo que desea el usuario.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

### Crear producto [POST]
Se agrega un nuevo producto al sistema para la compra por parte de los demás usuarios.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```
	+ Body
		```
		{
			"category_id": 1,
			"name": "Producto 1",
			"description": "Descripción del producto 1",
			"price": 50,
			"image": "https://..."
		}
		```

+ Response 201 (application/json)
El producto ha sido agregado al catálogo del usuario. Se retornan los detalles del producto para verificar que sean correctos.
	+ Body
		```
		{
			"id": 1,
			"vendor": {...},
			"category": {...},
			"name": "Producto 1",
			"description": "Descripción del producto 1",
			"price": 50.0,
			"image": "https://...",
			"visible": true
		}
		```

+ Response 400 (application/json)
Si la imagen no cumple con el formato de enlace web se devolverá un mensaje de error indicando el problema.
	+ Body
		```
		{"message": "La imagen debe ser un enlace."}
		```

+ Response 401 (application/json)
Si el usuario no es de tipo vendedor se le negará la petición de agregar el producto.
	+ Body
		```
		{"message": "Se requiere ser vendedor para agregar productos."}
		```

+ Response 404 (application/json)
Si la categoría no puede ser encontrada con el ID indicado se le informará al usuario.
	+ Body
		```
		{"message": "La categoría con ID 1 no ha sido encontrada."}
		```

## Producto [/products/{product_id}]

### Obtener producto [GET]
Devuelve los datos de un producto en específico.

+ Parameters
	+ product_id: `1` (int) - Identificador del producto a obtener.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
Los detalles del producto son devueltos. Incluyendo los datos de la categoría y del vendedor.
	+ Body
		```
		{
			"id": 1,
			"vendor": {...},
			"category": {...},
			"name": "Producto 1",
			"description": "Descripción del producto 1",
			"price": 50.0,
			"image": "https://...",
			"visible": true
		}
		```

+ Response 401 (application/json)
Se rechaza la petición porque el producto no está marcado como visible y tampoco es el vendedor de este.
	+ Body
		```
		{"message": "No tiene permitido visualizar este producto."}
		```

+ Response 404 (application/json)
El producto no pudo ser encontrado por el ID indicado, por lo que se informa el error.
	+ Body
		```
		{"messge": "El producto con ID 1 no ha sido encontrado."}
		```

### Modificar producto [PUT]

+ Parameters
	+ product_id: `1` (int) - Identificador del producto a modificar.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```
	+ Body
		```
		{
			"category_id": 1,
			"name": "Producto 1",
			"description": "Descripción del producto 1",
			"price": 50,
			"image": "https://...",
			"visible": true
		}
		```

+ Response 200 (application/json)
Se regresan los detalles del producto actualizados.
	+ Body
		```
		{
			"id": 1,
			"vendor": {...},
			"category": {...},
			"name": "Producto 1",
			"description": "Descripción del producto 1",
			"price": 50.0,
			"image": "https://...",
			"visible": true
		}
		```

+ Response 400 (application/json)
Se rechaza la petición porque la nueva imagen no cumple con el formato de enlace web.
	+ Body
		```
		{"message": "La imagen debe ser un enlace."}
		```

+ Response 401 (application/json)
Se niega el permiso de modificar el producto, pues el usuario que lo solicitó no es el vendedor de este.
	+ Body
		```
		{"message": "No tiene permitido modificar este producto."}
		```

+ Response 404 (application/json)
El producto a modificar no se pudo encontrar usando el ID proporcionado.
	+ Body
		```
		{"message": "El producto con ID 1 no ha sido encontrado."}
		```

### Eliminar producto [DELETE]
Eliminar un producto del inventario del usuario y del sistema.

+ Parameters
	+ product_id: `1` (int) - Identificador del producto a eliminar.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
El producto fue correctamente eliminado, se devuelve un mensaje de estado.
	+ Body
		```
		{"message": "Producto con ID 1 eliminado correctamente."}
		```

+ Response 401 (application/json)
Se rechaza la petición para eliminar el producto porque el usuario que lo solicitó no es el vendedor de este.
	+ Body
		```
		{"message": "No tiene permitido eliminar este producto."}
		```

+ Response 404 (application/json)
El producto a eliminar no pudo ser encontrado utilizando el ID que se proporcionó.
	+ Body
		```
		{"message": "El producto con ID 1 no ha sido encontrado."}
		```

## Inventario [/users/{user_id}/products]

### Obtener inventario [GET]
Regresa la lista de los productos que hay en el inventario del usuario vendedor, sean visibles o no.

+ Parameters
	+ user_id: `1` (int) - Identificador del usuario del cual obtener el inventario.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
Se devuelve una lista con sus productos agregados.
	+ Body
		```
		[
			{
				"id": 1,
				"vendor": {...},
				"category": {...},
				"name": "Producto 1",
				"description": "Descripción del producto 1",
				"price": 50.0,
				"image": "https://..",
				"visible": true
			},
			...
		]
		```

+ Response 401 (application/json)
El usuario está intentando ver el inventario de otro usuario, por lo que se rechaza la petición.
	+ Body
		```
		{"message": "No tiene permitido consultar la lista de productos."}
		```

# Group Reportes

## Colección de Reportes [/reports]

### Obtener reportes [GET]
Devuelve la lista de reportes de usuarios existentes en el sistema. Solo la pueden pedir los administradores.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
El usuario es administrador, por lo que se le entrega la lista de reportes.
	+ Body
		```
		[
			{
				"id": 1,
				"comment": "Comentarios sobre el usuario reportado.",
				"user": {...}
			},
			...
		]
		```

+ Response 401 (application/json)
Si el usuario no es administrador, se le devolverá un mensaje de error indicando lo sucedido.
	+ Body
		```
		{"message": "No tiene permitido consultar reportes."}
		```

### Generar reporte [POST]
Se realiza un reporte sobre un usuario, en caso de que haya un comportamineto inadecuado o una situación similar.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```
	+ Body
		```
		{
			"user_id": 1,
			"comment": "Comentarios sobre el usuario reportado."
		}
		```

+ Response 201 (application/json)
Se devuelven los detalles del reporte realizado, incluyendo los datos del usuario involucrado.
	+ Body
		```
		{
			"id": 1,
			"comment": "Comentarios sobre el usuario reportado.",
			"user": {...}
		}
		```

+ Response 404 (application/json)
El usuario no pudo ser encontrado con el ID que se proporcionó. Se devuelve un mensaje de error.
	+ Body
		```
		{"message": "El usuario con ID 1 no existe."}
		```

## Reporte [/reports/{report_id}]

### Obtener reporte [GET]
Se devuelven los detalles de un reporte en específico. Solo lo pueden pedir los administradores.

+ Parameters
	+ report_id: `1` (int) - Identificador del reporte a obtener.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
Los detalles del reporte son devueltos, pues el usuario que los pidió es administrador.
	+ Body
		```
		{
			"id": 1,
			"comment": "Comentarios sobre el usuario reportado.",
			"user": {...}
		}
		```

+ Response 401 (application/json)
El usuario no es administrador, por lo que se devuelve un mensaje de error.
	+ Body
		```
		{"message": "No tiene permitido consultar reportes."}
		```

+ Response 404 (application/json)
El reporte requerido no pudo ser encontrado con el ID que se proporcionó.
	+ Body
		```
		{"message": "El reporte con ID 1 no ha sido encontrado."}
		```

### Eliminar reporte [DELETE]
Se elimina el reporte del sistema, pues ya no es necesario porque ya fue atendido.

+ Parameters
	+ report_id: `1` (int) - Identificador del reporte a eliminar.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
El reporte fue eliminado correctamente, se informa lo sucedido.
	+ Body
		```
		{"message": "Reporte con ID 1 eliminado correctamente."}
		```

+ Response 401 (application/json)
El usuario no es administrador, por lo que no puede eliminar los reportes, así que se regresa un mensaje de error.
	+ Body
		```
		{"message": "No tiene permitido eliminar reportes."}
		```

+ Response 404 (application/json)
El reporte no pudo ser localizado con el ID indicado en la petición.
	+ Body
		```
		{"message": "El reporte con ID 1 no ha sido encontrado."}
		```

# Group Usuarios

## Datos del usuario [/users/{user_id}]

### Obtener usuario [GET]
Se obtienen los datos del usuario, tales como el nombre, su correo y su fotografía.

+ Parameters
	+ user_id: `1` (int) - Identificador del usuario a obtener.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
Se devuelven los datos guardados del usuario, excepto la contraseña.
	+ Body
		```
		{
			"id": 1,
			"first_name": "Test",
			"last_name": "Account",
			"email": "testaccount@hotmail.com",
			"type": "normal",
			"picture": null,
			"is_active": true
		}
		```

+ Response 404 (application/json)
El usuario no se pudo localizar con el ID proporcionado, por lo que se informa con un mensaje de error.
	+ Body
		```
		{"message": "El usuario con ID 1 no ha sido encontrado."}
		```

### Modificar datos [PUT]
Actualiza los datos del usuario, tales como el nombre, el correo electrónico y el tipo de usuario.

::: warning
Al modificar `user_type` de `vendor` a `normal` se perderán todos los productos agregados anteriormente por el usuario.
:::

+ Parameters
	+ user_id: `1` (int) - Identificador del usuario al cual modificar sus datos.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```
	+ Body
		```
		{
			"first_name": "Test",
			"last_name": "Account",
			"email": "testaccount@hotmail.com",
			"is_active": true,
			"user_type": "normal"
		}
		```

+ Response 200 (application/json)
Los datos han sido actualizados correctamente, se devuelve un objeto con los datos actualizados.
	+ Body
		```
		{
			"id": 1,
			"first_name": "Test",
			"last_name": "Account",
			"email": "testaccount@hotmail.com",
			"type": "normal",
			"picture": null,
			"is_active": true
		}
		```

+ Response 400 (application/json)
Alguno de los campos por actualizar no es válido, es posible que no cumplan con el formato necesario.
	+ Body
		```
		{"message": ...}
		```

+ Response 401 (application/json)
El usuario al que pertenece la JWT no es el mismo que se quiere modificar (solo se puede modificar a sí mismo).
	+ Body
		```
		{"message": "No tiene permiso para modificar los datos de esta cuenta."}
		```

### Eliminar usuario [DELETE]
Se borra al usuario del sistema, no se pide confirmación para realizarlo.

::: warning
Al eliminar un usuario, se borran todos sus productos, pedidos, reportes y toda la actividad realizada por este.
:::

+ Parameters
	+ user_id: `1` (int) - Identificador del usuario a eliminar.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
El usuario ha sido borrado correctamente. Se informa lo sucedido.
	+ Body
		```
		{"message": "Usuario con ID 1 borrado correctamente."}
		```

+ Response 401 (application/json)
Si el usuario no se está intentando eliminar a sí mismo o no es administrador se rechaza la petición (solo los administradores pueden eliminar cuentas ajenas).
	+ Body
		```
		{"message": "No tiene permiso para eliminar esta cuenta."}
		```

+ Response 404 (application/json)
No se encontró al usuario con el ID indicado en la petición.
	+ Body
		```
		{"message": "El usuario con ID 1 no existe."}
		```

## Imagen del usuario [/users/{user_id}/picture]

### Actualizar imagen [PUT]
Permite agregar o modificar una foto de perfil al usuario.

::: note
La imagen proporcionada debe ser una cadena de texto en formato  o ser `null`, en caso de querer removerla.
:::

+ Parameters
	+ user_id: `1` (int) - Identificador del usuario al cual actualizar su imagen.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```
	+ Body
		```
		{
			"picture": "https://..."
		}
		```

+ Response 200 (application/json)
Se devuelven los datos del usuario, con la imagen ya actualizada.
	+ Body
		```
		{
			"id": 1,
			"first_name": "Test",
			"last_name": "Account",
			"email": "testaccount@hotmail.com",
			"type": "normal",
			"picture": "https://...",
			"is_active": true
		}
		```

+ Response 400 (application/json)
Si la imagen no es null o no cumple con el formato de un enlace, se devolverá un mensaje de error.
	+ Body
		```
		{"message": "Se debe proporcionar un enlace de una imagen o null."}
		```

+ Response 401 (application/json)
Si el usuario intenta modificar la imagen de otro usuario, se rechazará la petición y se enviará un mensaje de error.
	+ Body
		```
		{"message": "No tiene permitido modificar la imagen de perfil de la cuenta."}
		```
