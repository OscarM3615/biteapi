FORMAT: 1A
HOST: http://127.0.0.1:5000

# Bite API

Bite API permite a los usuarios la compra y venta de productos agregados por ellos mismos.

# Group Autenticación
::: note
Todas las rutas, excepto por `/register` y `/login`, requieren que se incluya una JWT por lo que es necesario crear un usuario y autenticarse para poder utilizar la API.
:::

## Registro de usuarios [/register]

### Registrar usuario [POST]
Crear un nuevo usuario para interactuar con la API.

+ Request (application/json)
	+ Body
		```
		{
			"first_name": "Test",
			"last_name": "Account",
			"email": "testaccount@hotmail.com",
			"password": "1234"
		}
		```

+ Response 201 (application/json)
Devuelve al mismo usuario para verificar que se guardó correctamente.
	+ Body
		```
		{
			"id": 1,
			"first_name": "Test",
			"last_name": "Account",
			"email": "testaccount@hotmail.com",
			"type": "normal",
			"picture": null,
			"is_active": true
		}
		```

+ Response 400 (application/json)
En caso de que el correo ya esté registrado o alguno de los datos no sea válido, se devolverá el mensaje correspondiente.
	+ Body
		```
		{"message": ...}
		```

## Inicio de sesión [/login]

### Autenticar usuario [POST]
Obtener una JWT para poder utilizar las demás rutas.

+ Request (application/json)
	+ Body
		```
		{
			"email": "testaccount@hotmail.com",
			"password": "1234"
		}
		```

+ Response 200 (application/json)
El correo y la contraseña son los correctos.
	+ Body
		```
		{
			"access_token": ...
		}
		```

+ Response 401 (application/json)
El correo electrónico o la contraseña son incorrectos.
	+ Body
		```
		{
			"description": "Invalid credentials",
			"error": "Bad Request",
			"status_code": 401
		}
		```

## Usuario actual [/me]

### Obtener usuario actual [GET]
Devuelve los datos del usuario al que representa la JWT.

::: warning
En caso de que no se proporcione una JWT o que esta haya expirado, se devolverá un error de autenticación.
:::

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
	+ Body
		```
		{
			"id": 1,
			"first_name": "Test",
			"last_name": "Account",
			"email": "testaccount@hotmail.com",
			"type": "normal",
			"picture": null,
			"is_active": true
		}
		```

# Group Categorías

## Colección de categorías [/categories]

### Obtener categorías [GET]
Devuelve una lista de las categorías existentes.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
	+ Body
		```
		[
			{
				"id": 1,
				"name": "Categoría 1"
			},
			...
		]
		```

### Crear categoría [POST]
Ingresa una nueva categoría a la base de datos.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```
	+ Body
		```
		{
			"name": "Categoría 1"
		}
		```

+ Response 201 (application/json)
La categoría ha sido creada. Devuelve los datos de la categoría.
	+ Body
		```
		{
			"id": 1,
			"name": "Categoría 1"
		}
		```

+ Response 400 (application/json)
La categoría que se quiere crear ya existe en el sistema.
	+ Body
		```
		{"message": "La categoría 'Categoría 1' ya existe."}
		```

+ Response 401 (application/json)
El usuario no tiene permitido crear categorías (Solo pueden ser creadas por usuarios administradores).
	+ Body
		```
		{"message": "No tiene permitido crear nuevas categorías."}
		```

## Categoría [/categories/:category_id]

### Obtener categoría [GET]
Devuelve una única categoría.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
La categoría tiene un ID válido y está registrado en el sistema.
	+ Body
		```
		{
			"id": 1,
			"name": "Categoría 1"
		}
		```

+ Response 404 (application/json)
La categoría que el usuario busca no se pudo encontrar.
	+ Body
		```
		{"message": "La categoría con ID 1 no ha sido encontrada."}
		```

### Borrar categoría [DELETE]
Elimina una categoría.

::: warning
Al eliminar una categoría se eliminarán todos los productos ligados a ella.
:::

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
La categoría se elimina del sistema correctamente.
	+ Body
		```
		{"message": "Categoría con ID 1 eliminada correctamente."}
		```

+ Response 401 (application/json)
El usuario no cuenta con los permisos para eliminar una categoría (solo los administradores pueden hacerlo).
	+ Body
		```
		{"message": "No tiene permitido eliminar una categoría."}
		```

+ Response 404 (application/json)
La categoría ingresada según su ID no existe en el sistema.
	+ Body
		```
		{"message": "La categoría no ha sido encontrada."}
		```

# Group Favoritos

## Colección de Favoritos [/favourites]

### Obtener favoritos [GET]
Devuelve la lista de los productos favoritos del usuario.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
	+ Body
		```
		[
			{
				"id": 1,
				"product": {
					"id": 1,
					"vendor": {...},
					"category": {...},
					"name": "Producto 1",
					"description": "Descripción del producto 1",
					"price": 50.0,
					"image": "data:image/png;base64...",
					"visible": true
				}
			},
			...
		]
		```

### Agregar favorito [POST]
Agrega a la lista de favoritos del usuario un producto si no ha sido agregado aún.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```
	+ Body
		```
		{
			"product_id": 1
		}
		```

+ Response 200 (application/json)
El producto ha sido marcado como favorito para el usuario.
	+ Body
		```
		{
			"id": 1,
			"product": {
				"id": 1,
				"vendor": {...},
				"category": {...},
				"name": "Producto 1",
				"description": "Descripción del producto 1",
				"price": 50.0,
				"image": "data:image/png;base64...",
				"visible": true
			}
		}
		```

+ Response 400 (application/json)
El producto ya estaba marcado como favorito, no puede ser marcado de nuevo.
	+ Body
		```
		{"message": "El producto con ID 1 ya está marcado como favorito."}
		```

+ Response 401 (application/json)
El usuario no tiene permiso para agregar favoritos (los vendedores no pueden realizarlo).
	+ Body
		```
		{"message": "No puede marcar un producto como favorito."}
		```

+ Response 404 (application/json)
El producto no pudo ser encontrado con el ID que se proporcionó en la petición.
	+ Body
		```
		{"message": "El producto con ID 1 no ha sido encontrado."}
		```

## Favorito [/favourites/:favourite_id]

### Eliminar favorito [DELETE]
Permite quitar un producto de los favoritos del usuario. No elimina el producto del vendedor.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
El producto se elimina correctamente de la lista de favoritos.
	+ Body
		```
		{"message": "Favorito con ID 1 eliminado correctamente."}
		```

+ Response 401 (application/json)
El usuario no puede eliminar el favorito porque le pertenece a otro usuario.
	+ Body
		```
		{"message": "No tiene permitido eliminar este favorito."}
		```

+ Response 404 (application/json)
El registro del favorito no pudo ser encontrado con el ID indicado en la petición.
	+ Body
		```
		{"message": "El favorito con ID 1 no ha sido encontrado."}
		```

# Group Opiniones

## Colección de Opiniones [/products/:product_id/opinions]

### Obtener opiniones [GET]
Devuelve la lista de opiniones realizadas sobre un producto en particular.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
El producto existe, por lo que se devuelve una lista con las opiniones.
	+ Body
		```
		[
			{
				"id": 1,
				"product_id": 1,
				"rating": 4,
				"comment": "Comentarios sobre el producto."
			},
			...
		]
		```

+ Response 404 (application/json)
El producto no se pudo encontrar con el ID proporcionado, por lo que devuelve un mensaje de error.
	+ Body
		```
		{"message": "El producto con ID 1 no ha sido encontrado."}
		```

### Crear opinión [POST]
Crea una opinión sobre un producto existente.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```
	+ Body
		```
		{
			"id": 1,
			"product_id": 1,
			"rating": 4,
			"comment": "Comentarios sobre el producto."
		}
		```

+ Response 201 (application/json)
La opinión sobre el producto ha sido publicada.
	+ Body
		```
		{
			"id": 1,
			"product_id": 1,
			"rating": 4,
			"comment": "Comentarios sobre el producto."
		}
		```

+ Response 401 (application/json)
El usuario no tiene permiso para realizar opiniones. Los vendedores no pueden opinar sobre los productos.
	+ Body
		```
		{"message": "Un vendedor no puede realizar opiniones sobre los productos."}
		```

+ Response 404 (application/json)
El producto sobre el que se quiere opinar no se ha podido encontrar según el ID indicado.
	+ Body
		```
		{"message": "El producto con ID 1 no ha sido encontrado."}
		```

## Opinión [/products/:product_id/opinions/:opinion_id]

### Obtener opinión [GET]
Devuelve los datos de una opinión en concreto.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
La opinión existe, así que se devuelven sus datos.
	+ Body
		```
		{
			"id": 1,
			"product_id": 1,
			"rating": 4,
			"comment": "Comentarios sobre el producto."
		}
		```

+ Response 404 (application/json)
La opinión no ha sido encontrada, por lo que se devuelve un mensaje de error.
	+ Body
		```
		{"message": "La opinión con ID 1 no ha sido encontrada."}
		```

### Borrar opinión [DELETE]
Elimina una opinión si resulta ofensiva o no es adecuada. Solo los administradores pueden realizarlo.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
La opinión fue removida con éxito del sistema. Notifica lo sucedido.
	+ Body
		```
		{"message": "Opinión con ID 1 eliminada correctamente."}
		```

+ Response 401 (application/json)
El usuario no cumple con el permiso para eliminar opiniones. Solo los administradores tienen permitido hacerlo.
	+ Body
		```
		{"message": "No tiene permitido eliminar esta opinión."}
		```

+ Response 404 (application/json)
La opinión no pudo encontrarse utilizando el ID de la URI.
	+ Body
		```
		{"message": "La opinión con ID 1 no ha sido encontrada."}
		```

# Group Pedidos

## Colección de Pedidos [/orders]

### Obtener pedidos [GET]
Muestra una lista de los pedidos. Si el usuario es vendedor, se le muestran los pedidos que tiene pendientes, de lo contrario, se devuelven los pedidos realizados.

::: note
El formato del tiempo del pedido es UTC.
:::

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
	+ Body
		```
		[
			{
				"id": 1,
				"customer": {...},
				"product": {...},
				"location": "Destino de entrega",
				"amount": 1,
				"comment": "Comentarios a realizar (pueden ser indicaciones)",
				"status": "pending",
				"order_time": "2020-10-25 00:43:34.991331"
			},
			...
		]
		```

### Crear pedido [POST]
Se realiza un nuevo pedido sobre un producto. Envía un mensaje de error si el usuario que lo realiza es vendedor.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```
	+ Body
		```
		{
			"product_id": 1,
			"location": "Destino de entrega",
			"amount": 1
		}
		```

+ Response 201 (application/json)
El pedido ha sido creado, se devuelven los detalles del producto, incluyendo la fecha en que se realizó.
	+ Body
		```
		{
			"id": 1,
			"customer": {...},
			"product": {...},
			"location": "Destino de entrega",
			"amount": 1,
			"comment": "Comentarios a realizar (pueden ser indicaciones)",
			"status": "pending",
			"order_time": "2020-10-25 00:43:34.991331"
		}
		```

+ Response 400 (application/json)
La cantidad que se indicó en la petición no es aceptada porque debe ser un número positivo.
	+ Body
		```
		{"message": "La cantidad (-1) no es válida."}
		```

+ Response 401 (application/json)
El usuario no tiene permitido realizar pedidos por ser vendedor.
	+ Body
		```
		{"message": "No tiene permitido realizar pedidos."}
		```

+ Response 404 (application/json)
El producto no pudo ser encontrado con el ID que se proporcionó en la petición.
	+ Body
		```
		{"message": "El producto con ID 1 no ha sido encontrado."}
		```

## Pedido [/orders/:order_id]

### Obtener pedido [GET]
Se devuelven los detalles de un pedido en particular, solo en caso de que el usuario esté involucrado en él, ya sea como vendedor o como cliente.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
El usuario está involucrado en el pedido, por lo que puede acceder a los detalles.
	+ Body
		```
		{
			"id": 1,
			"customer": {...},
			"product": {...},
			"location": "Destino de entrega",
			"amount": 1,
			"comment": "Comentarios a realizar (pueden ser indicaciones)",
			"status": "pending",
			"order_time": "2020-10-25 00:43:34.991331"
		}
		```

+ Response 401 (application/json)
El usuario no está involucrado de ninguna manera con el pedido, por lo que no puede ver los detalles.
	+ Body
		```
		{"message": "No tiene permitido consultar el pedido."}
		```

+ Response 404 (application/json)
El pedido no pudo ser encontrado con el ID que se proporcionó en la petición.
	+ Body
		```
		{"message": "El pedido con ID 1 no ha sido encontrado."}
		```

### Completar pedido [PUT]
Marca el pedido como finalizado, solo lo puede realizar el vendedor involucrado en el pedido.

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```
	+ Body
		```
		{
			"status": "done"
		}
		```

+ Response 200 (application/json)
Se devuelven los detalles del pedido, con el campo de estado como finalizado.
	+ Body
		```
		{
			"id": 1,
			"customer": {...},
			"product": {...},
			"location": "Destino de entrega",
			"amount": 1,
			"comment": "Comentarios a realizar (pueden ser indicaciones)",
			"status": "done",
			"order_time": "2020-10-25 00:43:34.991331"
		}
		```

+ Response 401 (application/json)
El usuario que realizó la petición no es el vendedor del producto, por lo que no puede realizar el cambio.
	+ Body
		```
		{"message": "No tiene permitido finalizar este pedido."}
		```

+ Response 404 (application/json)
El pedido no pudo ser encontrado con el ID que se indicó.
	+ Body
		```
		{"message": "El pedido con ID 1 no ha sido encontrado."}
		```

### Cancelar pedido [DELETE]
El cliente puede cancelar el pedido si hay un error en este. Se elimina el pedido del sistema para no dejar rastro de él.

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)
El usuario es el cliente del pedido, por lo que se borra correctamente.
	+ Body
		```
		{"message": "Pedido con ID 1 eliminado correctamente."}
		```

+ Response 401 (application/json)
El usuario no es el cliente del pedido, por lo que se le niega el permiso para cancelar el pedido.
	+ Body
		```
		{"message": "No tiene permitido cancelar este pedido."}
		```

+ Response 404 (application/json)
El pedido no se pudo encontrar con el ID que se proporcionó.
	+ Body
		```
		{"message": "El pedido con ID 1 no ha sido encontrado."}
		```

# Group Productos

## Colección de productos [/products]

### Buscar productos [GET]

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

### Crear producto [POST]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 201 (application/json)

+ Response 400 (application/json)

+ Response 401 (application/json)

## Producto [/products/:product_id]

### Obtener producto [GET]

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 401 (application/json)

+ Response 404 (application/json)

### Modificar producto [PUT]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 400 (application/json)

+ Response 401 (application/json)

+ Response 404 (application/json)

### Eliminar producto [DELETE]

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 401 (application/json)

+ Response 404 (application/json)

## Inventario [/users/:user_id/products]

### Obtener inventario [GET]

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 401 (application/json)

# Group Reportes

## Colección de Reportes [/reports]

### Obtener reportes [GET]

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 401 (application/json)

### Generar reporte [POST]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 201 (application/json)

+ Response 404 (application/json)

## Reporte [/reports/:report_id]

### Obtener reporte [GET]

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 401 (application/json)

+ Response 404 (application/json)

### Eliminar reporte [DELETE]

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 401 (application/json)

+ Response 404 (application/json)

# Group Usuarios

## Datos del usuario [/users/:user_id]

### Obtener usuario [GET]

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 404 (application/json)

### Modificar datos [PUT]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 400 (application/json)

+ Response 401 (application/json)

### Eliminar usuario [DELETE]

+ Request
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 401 (application/json)

+ Response 404 (application/json)

## Imagen del usuario [/users/:user_id/picture]

### Actualizar imagen [PUT]

+ Request (application/json)
	+ Headers
		```
		Authorization: JWT {{access_token}}
		```

+ Response 200 (application/json)

+ Response 400 (application/json)

+ Response 401 (application/json)
